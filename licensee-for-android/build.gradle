import org.jetbrains.kotlin.gradle.dsl.KotlinVersion

plugins {
    id("java-gradle-plugin")
    alias(libs.plugins.gradle.pluginpublish)
    alias(libs.plugins.starter.library.kotlin)
    alias(libs.plugins.kotlin.serialization)
    alias(libs.plugins.kotlinx.binarycompatibility)
    id("com.starter.publishing")
}

dependencies {
    compileOnly(libs.agp.gradle.api)
    compileOnly(libs.kotlin.gradle.api)
    implementation(libs.com.squareup.kotlinpoet) {
        exclude(module: "kotlin-reflect")
    }
    implementation(libs.kotlinx.serialization.json.core)
    implementation(libs.kotlinx.serialization.json.okio)
    implementation(libs.com.squareup.okio)

    testRuntimeOnly(libs.junit.platform.launcher)
    testRuntimeOnly(libs.junit.jupiter.engine)

    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.assertj.core)
}


kotlin {
    explicitApi()
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

description = "A plugin that generates a list of open source licenses you depend on"

gradlePlugin {
    plugins {
        register("licenseeForAndroid") {
            id = "io.github.usefulness.licensee-for-android"
            displayName = "`cashapp/licensee` helper for Android"
            description = project.description
            tags.addAll(["licensee", "android", "kotlin", "assets", "resources"])
            implementationClass = "io.github.usefulness.licensee.LicenseeForAndroidPlugin"
        }
    }
}

final GENERATED_PACKAGE_NAME = "io.github.usefulness.licensee.generated"
final GENERATED_BUILD_DIR = layout.buildDirectory.map { it.dir("generated/config/${GENERATED_PACKAGE_NAME.replace('.', '/')}") }

tasks.register("generateBuildConfig") {
    final version = project.version
    doLast {
        def generatedDir = GENERATED_BUILD_DIR.get().asFile
        generatedDir.deleteDir()
        generatedDir.mkdirs()

        final className = "LicenseeForAndroidBuildConfig"
        final configClass = new File(generatedDir, "${className}.kt")
        BufferedWriter writer = configClass.newWriter()
        try {
            writer.writeLine("package $GENERATED_PACKAGE_NAME")
            writer.writeLine("")
            writer.writeLine("internal object $className { internal const val VERSION: String = \"${version.toString()}\" }")
            writer.flush()
        } finally {
            writer.close()
        }
    }
}

tasks.named("compileKotlin") {
    dependsOn("generateBuildConfig")
    sourceSets.named("main") {
        kotlin.srcDir(GENERATED_BUILD_DIR)
    }
}

tasks.named('clean') {
    delete GENERATED_BUILD_DIR
}
